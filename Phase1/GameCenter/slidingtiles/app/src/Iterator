
    @NonNull
        @Override
        public Iterator<Tile> iterator() {
            return new TileIterator();

        }

    private class TileIterator implements Iterator<Tile> {
        int currentRow = 1;
        int currentCol = 1;
        int currentPosition = (currentRow - 1) * NUM_COLS + currentCol;

        // eg. (row, col) = (3, 9), then it is indeed at row 4, column 10
        // we have 4 complete rows, and a in complete + 10
        // current position = 3*NUM_COLS + 10
        // Equation always: currentPosition = (currentRow - 1)*NUM_COLS + currentCol
        // we need to make sure that only current row will not exceed NUM_ROWS


        @Override
        public boolean hasNext() {
            int temp = currentPosition + 1;
            currentRow = temp / NUM_COLS;
            currentCol = temp % NUM_COLS;
            return currentRow <= NUM_ROWS;
        }

        @Override
        public Tile next() {
            if (this.hasNext()) {
                currentPosition++;
                currentRow = currentPosition / NUM_COLS;
                currentCol = currentPosition % NUM_COLS;
                return List.this[currentRow-1][currentCol-1];
            } else {
                throw new NoSuchElementException();
            }
        }